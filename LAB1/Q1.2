#============================= ITEM A =====================================
Análise Detalhada das Equações de Tempo

Melhor Caso - Vetor Ordenado Vo[n] = {1, 2, 3, ..., n}

No melhor caso, o loop interno nunca é executado porque a condição bge t4,t3,exit2 
é sempre verdadeira (o vetor já está ordenado).

Contagem instrução por instrução:

Inicialização (executada 1 vez):

addi sp,sp,-20 = 1

sw ra,16(sp) = 1

sw s3,12(sp) = 1

sw s2,8(sp) = 1

sw s1,4(sp) = 1

sw s0,0(sp) = 1

mv s2,a0 = 1

mv s3,a1 = 1

mv s0,zero = 1

Total inicialização: 9 instruções

Loop externo (executado n vezes):

bge s0,s3,exit1 = 1

addi s1,s0,-1 = 1

blt s1,zero,exit2 = 1 (sempre salta pois s1 = -1 na primeira iteração)

addi s0,s0,1 = 1

j for1 = 1

Total por iteração: 5 instruções

Finalização (executada 1 vez):

lw s0,0(sp) = 1

lw s1,4(sp) = 1

lw s2,8(sp) = 1

lw s3,12(sp) = 1

lw ra,16(sp) = 1

addi sp,sp,20 = 1

ret = 1

Total finalização: 7 instruções

Equação final: Io(n) = 9 + 5n + 7 = 5n + 16

Pior Caso - Vetor Ordenado Inversamente Vi[n] = {n, n-1, ..., 1}
No pior caso, o loop interno executa completamente para cada elemento.

Loop interno (para i de 0 até n-1, executa i vezes):

blt s1,zero,exit2 = 1

slli t1,s1,2 = 1

add t2,s2,t1 = 1

lw t3,0(t2) = 1

lw t4,4(t2) = 1

bge t4,t3,exit2 = 1 (nunca salta no pior caso)

mv a0,s2 = 1

mv a1,s1 = 1

jal SWAP = 1

addi s1,s1,-1 = 1

j for2 = 1

Total por iteração interna: 11 instruções

Número total de iterações do loop interno:
∑(i=0 até n-1) de i = n(n-1)/2

Instruções do loop interno total: 11 × n(n-1)/2

Instruções do loop externo (além do interno):

Por iteração: bge, addi, addi, j = 4 instruções

Total: 4n

Inicialização: 9 instruções
Finalização: 7 instruções

Equação final:
Ii(n) = 9 + 4n + [11 × n(n-1)/2] + 7
= 16 + 4n + (11n² - 11n)/2
= 16 + 4n + 5.5n² - 5.5n
= 5.5n² - 1.5n + 16

Tempos de Execução
Com f = 50MHz e CPI = 1:

Melhor caso: to(n) = (5n + 16) / 50,000,000 segundos

Pior caso: ti(n) = (5.5n² - 1.5n + 16) / 50,000,000 segundos

Essas equações confirmam a complexidade O(n) no melhor caso e O(n²) no 
pior caso da aplicação da função SORT().

