#============================= ITEM A =====================================

#arquivo sort.s já ordena o vetor em ordem crescente, código dO procedimento sort(INALTERADO):

SORT:	addi sp,sp,-20
	sw ra,16(sp)
	sw s3,12(sp)                                                                    CONTAGEM
	sw s2,8(sp)                         # INSTRUÇÕES TIPO R: add                 |      1
	sw s1,4(sp)                         # INSTRUÇÕES TIPO I: addi, lw, slli, ret |      14
	sw s0,0(sp)                         # INSTRUÇÕES TIPO S: sw                  |      5
	mv s2,a0                            # INSTRUÇÕES TIPO B: bge, blt            |      3
	mv s3,a1                            # INSTRUÇÕES TIPO J: jal, j              |      3
	mv s0,zero                          # TOTAL:                                        26
for1:	bge s0,s3,exit1
	addi s1,s0,-1
for2:	blt s1,zero,exit2
	slli t1,s1,2
	add t2,s2,t1
	lw t3,0(t2)
	lw t4,4(t2)
	bge t4,t3,exit2
	mv a0,s2
	mv a1,s1
	jal SWAP
	addi s1,s1,-1
	j for2
exit2:	addi s0,s0,1
	j for1
exit1: 	lw s0,0(sp)
	lw s1,4(sp)
	lw s2,8(sp)
	lw s3,12(sp)
	lw ra,16(sp)
	addi sp,sp,20
	ret

# Número total de instruções do programa: 3114

#Tempo do SORT (ms): 16

#Tamanho do código executável do SORT em bytes: 26 instruções × 4 bytes = 104 bytes

#Tamanho em bytes da Memória de dados usada: Vetor com 30 .word  -> Cada .word = 4 bytes:
30 elementos × 4 bytes = 120 bytes


#============================= ITEM B =====================================

#Código de Sort_Inverso que ordena os elementos do vetor original de forma decrescente

.eqv N 30

.data
Vetor:  .word 9,2,5,1,8,2,4,3,6,7,10,2,32,54,2,12,6,3,1,78,54,23,1,54,2,65,3,6,55,31
msg_instrucoes: .asciz "Instruções do SORT: "
msg_tempo: .asciz "\nTempo do SORT (ms): "

.text	
MAIN:	la a0,Vetor
	li a1,N
	jal SHOW

	la a0,Vetor
	li a1,N
	
	# Medição do SORT
 	csrr s1,3074
    csrr s0,3073
	jal SORT
    csrr t0,3073
    csrr t1,3074
    sub s0,t0,s0
    sub s1,t1,s1

	la a0,Vetor
	li a1,N
	jal SHOW

	# Mostrar resultados
	li a7,4
	la a0,msg_instrucoes
	ecall
	li a7,1
	mv a0,s1
	ecall
	
	li a7,4
	la a0,msg_tempo
	ecall
	li a7,1
	mv a0,s0
	ecall

	li a7,10
	ecall

SWAP:	slli t1,a1,2
	add t1,a0,t1
	lw t0,0(t1)
	lw t2,4(t1)
	sw t2,0(t1)
	sw t0,4(t1)
	ret

SORT:	addi sp,sp,-20
	sw ra,16(sp)
	sw s3,12(sp)
	sw s2,8(sp)
	sw s1,4(sp)
	sw s0,0(sp)
	mv s2,a0
	mv s3,a1
	mv s0,zero
for1:	bge s0,s3,exit1
	addi s1,s0,-1
for2:	blt s1,zero,exit2
	slli t1,s1,2
	add t2,s2,t1
	lw t3,0(t2)
	lw t4,4(t2)
	ble t4,t3,exit2   # ← ALTERAÇÃO PARA ORDEM DECRESCENTE
	mv a0,s2
	mv a1,s1
	jal SWAP
	addi s1,s1,-1
	j for2
exit2:	addi s0,s0,1
	j for1
exit1: 	lw s0,0(sp)
	lw s1,4(sp)
	lw s2,8(sp)
	lw s3,12(sp)
	lw ra,16(sp)
	addi sp,sp,20
	ret

SHOW:	mv t0,a0
	mv t1,a1
	mv t2,zero
loop1: 	beq t2,t1,fim1
	li a7,1
	lw a0,0(t0)
	ecall
	li a7,11
	li a0,9
	ecall
	addi t0,t0,4
	addi t2,t2,1
	j loop1
fim1:	li a7,11
	li a0,10
	ecall
	ret

# Número de instruções por tipo na função SORT permaneceu o mesmo (26) tendo em vista que só substituimos
# uma instrução pela outra.

# Número total de instruções do programa: 4922
#Tempo do SORT (ms): 31 